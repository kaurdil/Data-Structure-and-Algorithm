import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

	int removeMin() throws PriorityQueueException {
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
        if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
        int temp1=heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        int left=1;
        int right=2;
        int index=0;
        int min_index=index;
        while(left<heap.size()  ){
            if(heap.get(min_index)>heap.get(left)){
               min_index=left;
                
                
            }
               if(right <heap.size() && heap.get(min_index)>heap.get(right)){
                min_index=right;
                
            }
         if(min_index==index){
             break;
         }
            int temp=heap.get(index);
           heap.set(index,heap.get(min_index));
           heap.set(min_index,temp);
            index=min_index;
            left=2*index+1;
            right=2*index+2;
            
                 
        }
        return temp1;// Question says remove and return the min element
        
	}
}

class PriorityQueueException extends Exception {

}
