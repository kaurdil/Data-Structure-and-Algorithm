/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergetwoll(ListNode l1,ListNode l2){
        if(l1==null && l2==null){
            return null;
        }
        else if(l1==null) return l2;
        else if(l2==null) return l1;
        ListNode head=null;
        ListNode temp=null;
        ListNode t1=l1;
        ListNode t2=l2;
         if(head==null){
             if(t1.val<t2.val){
                 head=temp=t1;
                 t1=t1.next;
             }
             else{
                 head=temp=t2;
                 t2=t2.next; 
             }
         }
        while(t1!=null && t2!=null){
            if(t1.val<t2.val){
                 temp.next=t1;
                temp=temp.next;
                 t1=t1.next;
             }
            else{
                 temp.next=t2;
                temp=temp.next;
                 t2=t2.next;
            }
        }
        if(t1!=null){
            temp.next=t1;
        }
        else{
            temp.next=t2;
        }
        return head;
        
    }
    public ListNode mergeLists(ListNode []lists,int si,int ei){
        if(si==ei) return lists[si] ;
        int mid=(si+ei)/2;
        ListNode l1=mergeLists(lists,si,mid);
         ListNode l2=mergeLists(lists,mid+1,ei);
        return mergetwoll(l1,l2);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }
       return  mergeLists(lists,0,lists.length-1);
    }
}
